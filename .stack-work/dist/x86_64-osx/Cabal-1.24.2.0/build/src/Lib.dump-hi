
==================== FINAL INTERFACE ====================
2017-07-29 21:12:11.118941 UTC

interface testResults-0.1.0.0-7TYFrrF6jiYHWiuvmXG8vd:Lib 8002
  interface hash: 8d122da353d283170e215547da5f641a
  ABI hash: d74ceebde52131493f4d2e4f1874f1ba
  export-list hash: deb9c7ae6879eff68cf8d91d23679569
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: f6624f22fcdd76ed0ac6625466e2d712
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.someFunc
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      xml-1.3.14@xml-1.3.14-AKug8Ud7K0VEhc87tBwsGy
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO c9de64c5f5407c4cf1c52500c4d15200
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  xml-1.3.14@xml-1.3.14-AKug8Ud7K0VEhc87tBwsGy:Text.XML.Light e294d6a5bfb7172c619d68a3b4b486b9
import  -/  xml-1.3.14@xml-1.3.14-AKug8Ud7K0VEhc87tBwsGy:Text.XML.Light.Types a35b5c3c42cd25bf11713e93e3132740
82115c3c748a6e306ccc83ac42a719df
  $fShowError :: GHC.Show.Show Lib.Error
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.Error
                  Lib.$fShowError_$cshowsPrec
                  Lib.$fShowError_$cshow
                  Lib.$fShowError_$cshowList -}
82115c3c748a6e306ccc83ac42a719df
  $fShowError1 :: Lib.Error -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Lib.Error) (w1 :: GHC.Base.String) ->
                 case w of ww { Lib.Error ww1 ww2 ->
                 Lib.$w$cshowsPrec 0# ww1 ww2 w1 }) -}
b7753289e4a44a84e963d14353bc2d26
  $fShowError2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
20545bcc1fcff4de2a0343df637bb79b
  $fShowError3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "errorMessage = "#) -}
035b83c4817a4c82372c8432626a85b1
  $fShowError4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
2beecc3c8ba5eacd566f56969d55a7f1
  $fShowError5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "errorType = "#) -}
dcc7f2129eb7768db1907f23ea36c2fc
  $fShowError6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Error {"#) -}
82115c3c748a6e306ccc83ac42a719df
  $fShowError_$cshow :: Lib.Error -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Lib.Error) ->
                 Lib.$fShowError_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
82115c3c748a6e306ccc83ac42a719df
  $fShowError_$cshowList :: [Lib.Error] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Lib.Error Lib.$fShowError1) -}
82115c3c748a6e306ccc83ac42a719df
  $fShowError_$cshowsPrec ::
    GHC.Types.Int -> Lib.Error -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Lib.Error)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Lib.Error ww3 ww4 ->
                 Lib.$w$cshowsPrec ww1 ww3 ww4 w2 } }) -}
56fd69870f96a48c4467f8670b07fee4
  $fShowFailure :: GHC.Show.Show Lib.Failure
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.Failure
                  Lib.$fShowFailure_$cshowsPrec
                  Lib.$fShowFailure_$cshow
                  Lib.$fShowFailure_$cshowList -}
56fd69870f96a48c4467f8670b07fee4
  $fShowFailure1 :: Lib.Failure -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Lib.Failure) (w1 :: GHC.Base.String) ->
                 case w of ww { Lib.Failure ww1 ww2 ->
                 Lib.$w$cshowsPrec1 0# ww1 ww2 w1 }) -}
621964574322021340208105a90e1e25
  $fShowFailure2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "failureMessage = "#) -}
fc966fe91867511262516ff6d5862a59
  $fShowFailure3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "failureType = "#) -}
e53845d6b12cc4b4be48d2cb6151935e
  $fShowFailure4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Failure {"#) -}
56fd69870f96a48c4467f8670b07fee4
  $fShowFailure_$cshow :: Lib.Failure -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Lib.Failure) ->
                 Lib.$fShowFailure_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
56fd69870f96a48c4467f8670b07fee4
  $fShowFailure_$cshowList :: [Lib.Failure] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Lib.Failure
                   Lib.$fShowFailure1) -}
56fd69870f96a48c4467f8670b07fee4
  $fShowFailure_$cshowsPrec ::
    GHC.Types.Int -> Lib.Failure -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Lib.Failure)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Lib.Failure ww3 ww4 ->
                 Lib.$w$cshowsPrec1 ww1 ww3 ww4 w2 } }) -}
bffc41e6c32246f73ca65a12e0c6144b
  $tc'Error :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3345772815261631393##
                   16398077959038126235##
                   Lib.$trModule
                   Lib.$tc'Error1) -}
26198f100a17f014318d99f17ffa04a1
  $tc'Error1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Error"#) -}
27e58adca89e4368850bb832a2308d43
  $tc'Failure :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11017130073883516440##
                   9210500250097450163##
                   Lib.$trModule
                   Lib.$tc'Failure1) -}
1e2c257aeb34e6ecfb268372a287126f
  $tc'Failure1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Failure"#) -}
517976198fb1f714629102299c39ca20
  $tcError :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16621892870092592460##
                   11940062052776577508##
                   Lib.$trModule
                   Lib.$tcError1) -}
59751512075e15a9fd61bd5ab30848c5
  $tcError1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Error"#) -}
66226e5a990ca793388bfc8615e130c4
  $tcFailure :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   815425217836925547##
                   9749824949421939711##
                   Lib.$trModule
                   Lib.$tcFailure1) -}
c240951b9bd84ee533f48394f7d75834
  $tcFailure1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Failure"#) -}
7860dd476fac93ceff6115de6f13a7f8
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Lib.$trModule2 Lib.$trModule1) -}
b7e80b72a587fd9257244485579bd39e
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Lib"#) -}
254c6da5f0368a91e71e5770376679f9
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "testResults-0.1.0.0-7TYFrrF6jiYHWiuvmXG8vd"#) -}
8d3f745fea75f49b74f61ee858ba11bb
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: GHC.Base.String)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Lib.$fShowError6
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Lib.$fShowError5
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows6
                             (GHC.Show.showLitString
                                ww1
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows6
                                   (GHC.Base.++
                                      @ GHC.Types.Char
                                      Lib.$fShowError4
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Lib.$fShowError3
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.shows6
                                            (GHC.Show.showLitString
                                               ww2
                                               (GHC.Types.:
                                                  @ GHC.Types.Char
                                                  GHC.Show.shows6
                                                  (GHC.Base.++
                                                     @ GHC.Types.Char
                                                     Lib.$fShowError2
                                                     x))))))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w)) }) -}
2deae6d7449819006c6ccbfa7edbc44b
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: GHC.Base.String)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Lib.$fShowFailure4
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Lib.$fShowFailure3
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows6
                             (GHC.Show.showLitString
                                ww1
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows6
                                   (GHC.Base.++
                                      @ GHC.Types.Char
                                      Lib.$fShowError4
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Lib.$fShowFailure2
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.shows6
                                            (GHC.Show.showLitString
                                               ww2
                                               (GHC.Types.:
                                                  @ GHC.Types.Char
                                                  GHC.Show.shows6
                                                  (GHC.Base.++
                                                     @ GHC.Types.Char
                                                     Lib.$fShowError2
                                                     x))))))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w)) }) -}
82115c3c748a6e306ccc83ac42a719df
  data Error
    = Error {errorType :: GHC.Base.String,
             errorMessage :: GHC.Base.String}
56fd69870f96a48c4467f8670b07fee4
  data Failure
    = Failure {failureType :: GHC.Base.String,
               failureMessage :: GHC.Base.String}
8d384b4a452ba79060c1632f06389099
  errorMessage :: Lib.Error -> GHC.Base.String
  RecSel Left Lib.Error
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.Error) ->
                 case ds of wild { Lib.Error ds1 ds2 -> ds2 }) -}
0880b9052e3cd429d669c48c6119cb56
  errorType :: Lib.Error -> GHC.Base.String
  RecSel Left Lib.Error
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.Error) ->
                 case ds of wild { Lib.Error ds1 ds2 -> ds1 }) -}
6607659222ff7056b2067fce634329c0
  failureMessage :: Lib.Failure -> GHC.Base.String
  RecSel Left Lib.Failure
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.Failure) ->
                 case ds of wild { Lib.Failure ds1 ds2 -> ds2 }) -}
f941749edd2a14858550ac64a0c1a8d6
  failureType :: Lib.Failure -> GHC.Base.String
  RecSel Left Lib.Failure
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.Failure) ->
                 case ds of wild { Lib.Failure ds1 ds2 -> ds1 }) -}
a8d597a43c6ddfcdf5ed9185353827bf
  someFunc :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.someFunc1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
7713742a94de80eed828ffbf384a1bd2
  someFunc1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Lib.someFunc2
                   GHC.Types.True
                   eta) -}
63ad7d91e31c4629720900860da8bf0e
  someFunc2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "someFunc"#) -}
instance [safe] GHC.Show.Show [Lib.Error] = Lib.$fShowError
instance [safe] GHC.Show.Show [Lib.Failure] = Lib.$fShowFailure
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

